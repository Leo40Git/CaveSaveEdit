// Metadata
function getName() {
    return "Cave Story";
}
function getAuthor() {
    return "Leo40Story, zxin (flag list), Wistil, Noxid, Carrotlord, BLink (entity frames)";
}
// Game information
function getExeName() {
    return "Doukutsu";
}
function getArmsImageYStart() {
    return 0;
}
function getArmsImageSize() {
    return 32;
}
function getFPS() {
    return 50;
}
function getGraphicsResolution() {
    return 1;
}
// Special support
function getSpecials() {
    return [];
}
// Array of map names
function getMapNames() {
    return [ "Credits", "Arthur's House (Normal)", "Egg Corridor",
	    "Egg No. 00 (Normal)", "Egg No. 06", "Egg Observation Room",
	    "Grasstown", "Santa's House", "Chaco's House", "Labyrinth I",
	    "Sand Zone (Normal)", "Mimiga Village", "First Cave",
	    "Start Point", "Shack", "Reservoir", "Graveyard", "Yamashita Farm",
	    "Shelter", "Assembly Hall", "Save Point (Mimiga Village)",
	    "Side Room (Egg Corridor)", "Cthulhu's Abode (Egg Corridor)",
	    "Egg No. 01", "Arthur's House (cutscene)", "Power Room",
	    "Save Point (Grasstown)", "Execution Chamber", "Gum",
	    "Sand Zone Residence", "Grasstown Hut", "Main Artery",
	    "Small Room", "Jenka's House (before Balrog attack)",
	    "Deserted House", "Sand Zone Storehouse",
	    "Jenka's House (after Balrog attack)",
	    "Sand Zone (After boss fight)", "Labyrinth H", "Labyrinth W",
	    "Camp", "Clinic Ruins", "Labyrinth Shop", "Labyrinth B",
	    "Boulder Chamber", "Labyrinth M", "Dark Place", "Core", "Waterway",
	    "Egg Corridor?", "Cthulhu's Abode?", "Egg Observation Room?",
	    "Egg No. 00 (hatched)", "Outer Wall", "Side Room (Egg Corridor?)",
	    "Storehouse", "Plantation", "Jail No. 1", "Hideout", "Rest Area",
	    "Teleporter", "Jail No. 2", "Balcony (normal)", "Final Cave",
	    "Throne Room", "The King's Table", "Prefab House (normal)",
	    "Last Cave (Hidden)", "Black Space", "Little House",
	    "Balcony (escaping)", "Ending", "Intro", "Waterway Cabin",
	    "Credits - Labyrinth", "Credits - Jenka's House",
	    "Credits - Power Room", "Credits - Graveyard", "Credits - Sky",
	    "Prefab House (entrance to Hell)", "Sacred Grounds B1",
	    "Sacred Grounds B2", "Sacred Grounds B3", "Storage",
	    "Passage? (normal)", "Passage? (from Sacred Grounds B3)",
	    "Statue Chamber", "Seal Chamber (normal)", "Corridor",
	    "Credits - Laboratory", "Hermit Gunsmith", "Island Cutscene",
	    "Seal Chamber (after fight)", "Credits - Balcony", "Clock Room" ];
}
// Array of song names
function getSongNames() {
    return [ "None", "Mischiveous Robot", "Safety", "Game Over", "Gravity",
	    "On To Grasstown", "Meltdown 2", "Eyes of Flame", "Gestation",
	    "Mimiga Town", "Get Item!", "Balrog's Theme", "Cemetary", "Plant",
	    "Pulse", "Victory!", "Get Heart Tank!", "Tyrant", "Run!",
	    "Jenka 1", "Labyrinth Fight", "Access", "Oppresion", "Geothermal",
	    "Cave Story", "Moonsong", "Hero's End", "Scorching Back", "Quiet",
	    "Final Cave", "Balcony", "Charge", "Last Battle",
	    "The Way Back Home", "Zombie", "Break Down", "Running Hell",
	    "Jenka 2", "Living Waterway", "Seal Chamber", "Toroko's Theme",
	    "White Stone Wall" ];
}
// Array of equip names
function getEquipNames() {
    return [ "Booster v0.8", "Map System", "Arms Barrier", "Turbocharge",
	    "Curly's Air Tank", "Booster v2.0", "Mimiga Mask",
	    "Whimsical Star", "Nikumaru Counter" ];
}
// Array of weapon names
function getWeaponNames() {
    return [ "None", "Snake", "Polar Star", "Fireball", "Machine Gun",
	    "Missile Launcher", null, "Bubbler", null, "Blade",
	    "Super Missile", null, "Nemesis", "Spur" ];
}
// Array of item names
function getItemNames() {
    return [ "None", "Arthur's Key", "Map System", "Santa's Key",
	    "Silver Locket", "Beast Fang", "Life Capsule", "ID Card",
	    "Jellyfish Juice", "Rusty Key", "Gum Key", "Gum Base", "Charcoal",
	    "Explosive", "Puppy", "Life Pot", "Cure-All", "Clinic Key",
	    "Booster v0.8", "Arms Barrier", "Turbocharge", "Curly's Air Tank",
	    "Nikumaru Counter", "Booster v2.0", "Mimiga Mask",
	    "Teleporter Room Key", "Sue's Letter", "Controller",
	    "Broken Sprinkler", "Sprinkler", "Tow Rope", "Clay Figure Medal",
	    "Little Man", "Mushroom Badge", "Ma Pignon", "Curly's Underwear",
	    "Alien Medal", "Chaco's Lipstick", "Whimsical Star", "Iron Bond" ];
}
// Array of warp menu names
function getWarpNames() {
    return [ "None", "Egg Corridor", "Grasstown", "Sand Zone", "Labyrinth",
	    "Plantation" ];
}
// Array of warp location names
function getWarpLocNames() {
    var warpLoc = [ "None" ];
    warpLoc[6001] = "Egg Corridor";
    warpLoc[6002] = "Grasstown";
    warpLoc[6003] = "Sand Zone";
    warpLoc[6004] = "Labyrinth";
    warpLoc[6005] = "Plantation";
    return warpLoc;
}
// Save flag ID, this flag will be unmodifiable!
function getSaveFlagID() {
    return 431;
}
// Array of flag descriptions
function getFlagDescriptions() {
    var flagDesc = [];
    flagDesc[100] = "Egg Corridor Sue & Igor cutscene has been seen.";
    flagDesc[101] = "1st Egg Corridor Life Capsule obtained. (Near teleporter)";
    flagDesc[102] = "2nd Egg Corridor Life Capsule obtained. (Cthulhu's Abode)";
    flagDesc[103] = "Igor beaten.";
    flagDesc[105] = "Opens Side Room door. Set by Sue in Egg No. 00.";
    flagDesc[106] = "Shows you the Sue and Kazuma cutscene when leaving Egg Corridor. Set by Sue in Egg No. 00.";
    flagDesc[120] = "Sue left Egg No. 00. Changes Mahin dialogue.";
    flagDesc[140] = "ID Card obtained.";
    flagDesc[153] = "Set once Egg Corridor teleportation is permitted.";
    flagDesc[154] = "Computer displays \"Connecting to Grasstown\". Set by Sue in Egg No. 00.";
    flagDesc[155] = "Shows Sue trapped in cage cutscene when leaving Arthur's House. Set by Sue in Egg No. 00.";
    flagDesc[156] = "Changes Mahin dialogue. Set when Kazuma and Booster return from Grasstown.";
    flagDesc[157] = "Changes computer text. Set in the cutscene when returning to Arthur's house, post-Grasstown.";
    flagDesc[158] = "Set once Sand Zone teleportation is permitted. Changes Arthur's House dialogues.";
    flagDesc[159] = "Takes you to the \"Egg Corridor?\". Changes computer text.";
    flagDesc[160] = "Makes Booster teleport into Arthur's house and give you the Booster v2.0.";
    flagDesc[161] = "Booster is in Arthur's house. Hides \"Provided only I live\" text in Prefab Building.";
    flagDesc[162] = "Professor Booster is still alive for a credits cutscene. Used to tell which booster you had.";
    flagDesc[200] = "Egg Observation Room ML chest opened.";
    flagDesc[201] = "Set once the Missile Launcher (ML) is obtained.";
    flagDesc[202] = "Set once the Super Missile Launcher (SML) is obtained.";
    flagDesc[210] = "Set once Santa's Key is obtained.";
    flagDesc[211] = "Advances Santa's dialogue outside his house.";
    flagDesc[212] = "Set once you give Santa his key. Lets you into his house and stops him appearing outside.";
    flagDesc[213] = "Remove the grate on Chaco's fireplace. For when you go trough the fireplace.";
    flagDesc[214] = "Allows the player to get into the Power Room in Grasstown. Set after the Rusty Key has been used.";
    flagDesc[215] = "Set when Kazuma asks you to open the Shelter's door with the Rusty Key.";
    flagDesc[216] = "Set when you discover that there's no keyhole in the door.";
    flagDesc[217] = "Turns off Grasstown teleporter lights. Never set in-game.";
    flagDesc[218] = "Grasstown ML chest opened.";
    flagDesc[219] = "Kazuma and Booster have ridden the scooter. Shows King releasing Sue when teleporting back.";
    flagDesc[221] = "Set when you get the Gum Key.";
    flagDesc[222] = "Set after using Gum Key to get to Gum.";
    flagDesc[223] = "Set when Kazuma discovers that the Rusty Key doesn't open the door. Advances door text.";
    flagDesc[224] = "Set every time you teleport into Grasstown. Advances King's dialogue, and Sue's jail dialogue.";
    flagDesc[225] = "Stops the scooter from appearing next to Shelter.";
    flagDesc[226] = "Makes the scooter appear broken next to the teleporter.";
    flagDesc[227] = "Makes smoke generator appear next to scooter. Unset if you teleport out of Grasstown or look at Santa's locked door.";
    flagDesc[228] = "Makes Grasstown's near-teleporter Cthulhu skip the 'soldier from the surface' dialogue.";
    flagDesc[240] = "Set just before you get the Fireball. Would make Santa run a nonexistent event if 241 weren't set at the same time.";
    flagDesc[241] = "Set once Fireball is obtained. Advances Santa and Chaco dialogue.";
    flagDesc[242] = "Set once Charcoal is obtained. Advances Santa dialogue.";
    flagDesc[243] = "Set once you get teleported to Labyrinth I. Unused?";
    flagDesc[261] = "Set once you interact with Chaco's fireplace.";
    flagDesc[262] = "Set once you get teleported to Labyrinth I. Unused?";
    flagDesc[263] = "Set when you interact with Chaco's fireplace. Used to jump to the lipstick event. Unset every time you re-enter her house.";
    flagDesc[272] = "Set when you start the Omega fight. Lifts the curse on the sunstones.";
    flagDesc[273] = "Gets rid of the sunstones.";
    flagDesc[274] = "Set whenever you have one of Jenka's puppies. Makes them appear on your back.";
    flagDesc[275] = "Set once you get the puppy that's next to the Sand Zone Storehouse.";
    flagDesc[276] = "Set once you get the puppy in the middle of the Sand Zone";
    flagDesc[278] = "Set after Jenka gets creamed by Balrog.";
    flagDesc[279] = "Set once you get the puppy that's in the treasure chest.";
    flagDesc[280] = "Makes you go to the alternate version of Jenka's house whenever you go to her house.";
    flagDesc[301] = "Set when you kill the eye door in the First Cave.";
    flagDesc[302] = "Set when you exit the First Cave for the first time.";
    flagDesc[303] = "Set after the Spur is obtained.";
    flagDesc[320] = "Set in the Mimiga Village opening cutscene. Also set when you talk to King. Makes King disappear.";
    flagDesc[321] = "Makes King appear in a different place.";
    flagDesc[322] = "Set once you get the Map System.";
    flagDesc[323] = "Set once you interact with King before getting the Silver Locket. Advances his dialogue.";
    flagDesc[324] = "Set once you use Arthur's Key for the first time. Skips the \"Used Arthur's Key\" text in future.";
    flagDesc[325] = "Set once teleportation to Grasstown is permitted.";
    flagDesc[326] = "Makes Toroko appear in the Shack with her stick.";
    flagDesc[327] = "Makes Jack appear in Assembly Hall instead of Cemetery entrance. Advances King dialogue.";
    flagDesc[329] = "Set by Sue in Egg No. 00. Unset when teleport to Arthur's House from Grasstown. Unknown use.";
    flagDesc[340] = "Set in post-Core drowning dialogue. Unknown use.";
    flagDesc[341] = "Set in Core defeated dialogue. Changes Mimiga Village/Chako's House/Sand Zone Residence music to Quiet. Changes Arthur's House music to Pulse.";
    flagDesc[360] = "Set Toroko's Shack dialogue. Makes the door to the Shack broken.";
    flagDesc[361] = "Set in Balrog's Shack dialogue. Makes the door tell you that you can't escape.";
    flagDesc[362] = "Set when getting Silver Locket. Prevents Shack door openeding pre-Toroko/Balrog dialogue.";
    flagDesc[370] = "Set when getting Silver Locket. Stops Silver Locket from appearing.";
    flagDesc[371] = "Set when getting Silver Locket. Shows Toroko and King cutscene when exiting Resovoir.";
    flagDesc[372] = "Set when you get Curly's Air Tank. Unknown use.";
    flagDesc[390] = "If set, Arthur's Key does not appear.";
    flagDesc[410] = "If set, Beast Fang does not appear.";
    flagDesc[411] = "Set in post-core drowning dialogue. Unknown use.";
    flagDesc[430] = "Set in opening cut-scene dialogue. Makes OOB null entity in Start Point disappear.";
    flagDesc[431] = "Set the first time you save. Makes the game load your save profile when you retry after dying.";
    flagDesc[440] = "Set in Toroko Shack dialogue. Unset in Kazuma/Sue pre-Grasstown cutscene. Unknown use.";
    flagDesc[441] = "Set when first entering Arthur's House. Unknown use.";
    flagDesc[442] = "Set when getting the Bubbler. Stops you from getting the weapon again.";
    flagDesc[443] = "If set, Arthur is in the Assembly Hall. Unset in Kazuma/Sue pre-Grasstown cutscene.";
    flagDesc[444] = "Set in post-Grasstown Kazuma/Booster cutscene. Unset in pre-Labyrinth cutscene. Unknown use.";
    flagDesc[470] = "Set when lowering Egg Corridor sheild. Changes computer terminal text.";
    flagDesc[480] = "Prevents Power Room door from being opened. Set for Balrog boss fight.";
    flagDesc[481] = "Set in Grasstown Balrog boss dialogue. Turns on Grasstown fans.";
    flagDesc[482] = "Set in Grasstown Balrog boss dialogue. Changes Malco interaction text for boss fight.";
    flagDesc[483] = "Set in Grasstown Balrog post-boss dialogue. Changes Malco interaction to allow pulling out post-boss fight.";
    flagDesc[484] = "No description yet.";
    flagDesc[485] = "No description yet.";
    flagDesc[486] = "No description yet.";
    flagDesc[500] = "No description yet.";
    flagDesc[501] = "No description yet.";
    flagDesc[520] = "No description yet.";
    flagDesc[521] = "No description yet.";
    flagDesc[522] = "No description yet.";
    flagDesc[523] = "No description yet.";
    flagDesc[524] = "No description yet.";
    flagDesc[525] = "No description yet.";
    flagDesc[550] = "No description yet.";
    flagDesc[561] = "No description yet.";
    flagDesc[562] = "No description yet.";
    flagDesc[563] = "No description yet.";
    flagDesc[564] = "No description yet.";
    flagDesc[565] = "No description yet.";
    flagDesc[580] = "No description yet.";
    flagDesc[590] = "No description yet.";
    flagDesc[591] = "No description yet.";
    flagDesc[592] = "No description yet.";
    flagDesc[593] = "No description yet.";
    flagDesc[594] = "No description yet.";
    flagDesc[595] = "No description yet.";
    flagDesc[596] = "No description yet.";
    flagDesc[610] = "No description yet.";
    flagDesc[620] = "No description yet.";
    flagDesc[621] = "No description yet.";
    flagDesc[622] = "No description yet.";
    flagDesc[623] = "No description yet.";
    flagDesc[624] = "No description yet.";
    flagDesc[641] = "No description yet.";
    flagDesc[680] = "No description yet.";
    flagDesc[681] = "No description yet.";
    flagDesc[700] = "No description yet.";
    flagDesc[701] = "No description yet.";
    flagDesc[702] = "No description yet.";
    flagDesc[703] = "No description yet.";
    flagDesc[704] = "No description yet.";
    flagDesc[705] = "No description yet.";
    flagDesc[710] = "No description yet.";
    flagDesc[711] = "No description yet.";
    flagDesc[720] = "No description yet.";
    flagDesc[721] = "No description yet.";
    flagDesc[722] = "No description yet.";
    flagDesc[740] = "No description yet.";
    flagDesc[741] = "No description yet.";
    flagDesc[742] = "No description yet.";
    flagDesc[743] = "No description yet.";
    flagDesc[744] = "No description yet.";
    flagDesc[760] = "No description yet.";
    flagDesc[761] = "No description yet.";
    flagDesc[762] = "No description yet.";
    flagDesc[763] = "No description yet.";
    flagDesc[764] = "No description yet.";
    flagDesc[765] = "No description yet.";
    flagDesc[766] = "No description yet.";
    flagDesc[780] = "No description yet.";
    flagDesc[781] = "No description yet.";
    flagDesc[782] = "No description yet.";
    flagDesc[783] = "No description yet.";
    flagDesc[800] = "No description yet.";
    flagDesc[801] = "No description yet.";
    flagDesc[820] = "No description yet.";
    flagDesc[821] = "No description yet.";
    flagDesc[822] = "No description yet.";
    flagDesc[823] = "No description yet.";
    flagDesc[824] = "No description yet.";
    flagDesc[825] = "No description yet.";
    flagDesc[826] = "No description yet.";
    flagDesc[827] = "No description yet.";
    flagDesc[828] = "No description yet.";
    flagDesc[829] = "No description yet.";
    flagDesc[830] = "No description yet.";
    flagDesc[832] = "No description yet.";
    flagDesc[834] = "No description yet.";
    flagDesc[835] = "No description yet.";
    flagDesc[836] = "No description yet.";
    flagDesc[837] = "No description yet.";
    flagDesc[838] = "No description yet.";
    flagDesc[839] = "No description yet.";
    flagDesc[851] = "No description yet.";
    flagDesc[880] = "No description yet.";
    flagDesc[920] = "No description yet.";
    flagDesc[921] = "No description yet.";
    flagDesc[940] = "No description yet.";
    flagDesc[941] = "No description yet.";
    flagDesc[960] = "No description yet.";
    flagDesc[961] = "No description yet.";
    flagDesc[1000] = "No description yet.";
    flagDesc[1001] = "No description yet.";
    flagDesc[1002] = "No description yet.";
    flagDesc[1003] = "No description yet.";
    flagDesc[1004] = "No description yet.";
    flagDesc[1020] = "No description yet.";
    flagDesc[1021] = "No description yet.";
    flagDesc[1022] = "No description yet.";
    flagDesc[1023] = "No description yet.";
    flagDesc[1024] = "No description yet.";
    flagDesc[1025] = "No description yet.";
    flagDesc[1026] = "No description yet.";
    flagDesc[1027] = "No description yet.";
    flagDesc[1028] = "No description yet.";
    flagDesc[1029] = "No description yet.";
    flagDesc[1030] = "No description yet.";
    flagDesc[1031] = "No description yet.";
    flagDesc[1032] = "No description yet.";
    flagDesc[1033] = "No description yet.";
    flagDesc[1034] = "No description yet.";
    flagDesc[1035] = "No description yet.";
    flagDesc[1036] = "No description yet.";
    flagDesc[1037] = "No description yet.";
    flagDesc[1038] = "No description yet.";
    flagDesc[1039] = "No description yet.";
    flagDesc[1040] = "No description yet.";
    flagDesc[1041] = "No description yet.";
    flagDesc[1042] = "No description yet.";
    flagDesc[1044] = "No description yet.";
    flagDesc[1045] = "No description yet.";
    flagDesc[1046] = "No description yet.";
    flagDesc[1080] = "No description yet.";
    flagDesc[1080] = "No description yet.";
    flagDesc[1081] = "No description yet.";
    flagDesc[1082] = "No description yet.";
    flagDesc[1100] = "No description yet.";
    flagDesc[1101] = "No description yet.";
    flagDesc[1102] = "No description yet.";
    flagDesc[1103] = "No description yet.";
    flagDesc[1105] = "No description yet.";
    flagDesc[1106] = "No description yet.";
    flagDesc[1107] = "No description yet.";
    flagDesc[1120] = "No description yet.";
    flagDesc[1121] = "No description yet.";
    flagDesc[1140] = "No description yet.";
    flagDesc[1141] = "No description yet.";
    flagDesc[1190] = "No description yet.";
    flagDesc[1191] = "No description yet.";
    flagDesc[1192] = "No description yet.";
    flagDesc[1250] = "No description yet.";
    flagDesc[1270] = "No description yet.";
    flagDesc[1271] = "No description yet.";
    flagDesc[1272] = "No description yet.";
    flagDesc[1273] = "No description yet.";
    flagDesc[1274] = "No description yet.";
    flagDesc[1290] = "No description yet.";
    flagDesc[1320] = "No description yet.";
    flagDesc[1340] = "No description yet.";
    flagDesc[1341] = "No description yet.";
    flagDesc[1370] = "No description yet.";
    flagDesc[1371] = "No description yet.";
    flagDesc[1372] = "No description yet.";
    flagDesc[1373] = "No description yet.";
    flagDesc[1390] = "No description yet.";
    flagDesc[1391] = "No description yet.";
    flagDesc[1392] = "No description yet.";
    flagDesc[1393] = "No description yet.";
    flagDesc[1440] = "No description yet.";
    flagDesc[1441] = "No description yet.";
    flagDesc[1442] = "No description yet.";
    flagDesc[1443] = "No description yet.";
    flagDesc[1444] = "No description yet.";
    flagDesc[1445] = "No description yet.";
    flagDesc[1460] = "No description yet.";
    flagDesc[1531] = "No description yet.";
    flagDesc[1532] = "No description yet.";
    flagDesc[1533] = "No description yet.";
    flagDesc[1534] = "No description yet.";
    flagDesc[1550] = "No description yet.";
    flagDesc[1551] = "No description yet.";
    flagDesc[1561] = "No description yet.";
    flagDesc[1562] = "No description yet.";
    flagDesc[1563] = "No description yet.";
    flagDesc[1564] = "No description yet.";
    flagDesc[1590] = "No description yet.";
    flagDesc[1591] = "No description yet.";
    flagDesc[1592] = "No description yet.";
    flagDesc[1593] = "No description yet.";
    flagDesc[1600] = "No description yet.";
    flagDesc[1620] = "No description yet.";
    flagDesc[1640] = "No description yet.";
    flagDesc[1641] = "No description yet.";
    flagDesc[1642] = "No description yet.";
    flagDesc[1643] = "No description yet.";
    flagDesc[1644] = "No description yet.";
    flagDesc[1700] = "No description yet.";
    flagDesc[2000] = "No description yet.";
    flagDesc[3000] = "No description yet.";
    flagDesc[3001] = "No description yet.";
    flagDesc[3002] = "No description yet.";
    flagDesc[3003] = "No description yet.";
    flagDesc[3004] = "No description yet.";
    flagDesc[4000] = "Set after defeating the Core. Makes drowning run an alternate event.";
    return flagDesc;
}
// Player extras
function getPlayerFrame(x, y, leftright, costume) {
    var yoff = 0;
    if (leftright)
	yoff = 32;
    return new java.awt.Rectangle(0, costume * 64 + yoff, 32, 32)
}
function getPlayerOffset(x, y, leftright, costume) {
    return new java.awt.Point(0, 0);
}
// Entity extras
function getEntityFrame(entity) {
    switch (entity.type) {
    case 0: // Null ()
	return java.awt.Rectangle(0, 0, 0, 0);
    case 1: // EXP (Weapn energy)
	return java.awt.Rectangle(0, 32, 32, 32);
    case 2: // Behemoth (Enemy Behem)
	return java.awt.Rectangle(0, 0, 64, 48);
    case 3: // Null_disappear (?)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 4: // Smoke (Smoke)
	return java.awt.Rectangle(128, 0, 32, 32);
    case 5: // Critter(g) (Enemy CrtHG)
	return java.awt.Rectangle(0, 94, 32, 30);
    case 6: // Beetle(horiz_g) (Enemy BtlHG)
	return java.awt.Rectangle(0, 160, 32, 32);
    case 7: // Basil (Enemy Basil)
	return java.awt.Rectangle(512, 128, 48, 38);
    case 8: // Beetle(follow) (Enemy BtlF1)
	return java.awt.Rectangle(160, 160, 32, 32);
    case 9: // Balrog(DropIn) (Blrg drop)
	return java.awt.Rectangle(0, 0, 80, 48);
    case 10: // Balrog(Shoot) (Boss Blrg0)
	return java.awt.Rectangle(0, 0, 80, 48);
    case 11: // Shot(Balrog) (Proj Blrg1)
	return java.awt.Rectangle(480, 160, 32, 32);
    case 12: // Balrog(cutscene) (Blrg)
	return java.awt.Rectangle(0, 0, 80, 48);
    case 13: // ForceField (Force field)
	return java.awt.Rectangle(256, 0, 42, 32);
    case 14: // SantaKey (Santa Key)
	return java.awt.Rectangle(450, 0, 30, 32);
    case 15: // Chest(closed) (Chest closd)
	return java.awt.Rectangle(480, 0, 32, 32);
    case 16: // SavePoint (Save point)
	return java.awt.Rectangle(192, 32, 32, 32);
    case 17: // Refill (Refil)
	return java.awt.Rectangle(576, 0, 32, 32);
    case 18: // Door (Door)
	return java.awt.Rectangle(448, 32, 32, 48);
    case 19: // Balrog(burst) (Blrg bust)
	return java.awt.Rectangle(0, 0, 80, 48);
    case 20: // Computer (Compu)
	return java.awt.Rectangle(576, 32, 64, 48);
    case 21: // Chest(open) (Chest open)
	return java.awt.Rectangle(448, 80, 32, 16);
    case 22: // Teleporter (Telep)
	return java.awt.Rectangle(480, 32, 48, 64);
    case 23: // TP_lights (Telep light)
	return java.awt.Rectangle(528, 64, 48, 8);
    case 24: // PowerCritter (Enemy PCrit)
	return java.awt.Rectangle(0, 0, 48, 48);
    case 25: // Lift (Lift platf)
	return java.awt.Rectangle(512, 128, 68, 32);
    case 26: // Bat(circle_black) (Enemy BatBC)
	return java.awt.Rectangle(64, 160, 32, 32);
    case 27: // DeathTrap (Death trap)
	return java.awt.Rectangle(192, 128, 64, 48);
    case 28: // Critter(fly_g) (Enemy CrtFy)
	return java.awt.Rectangle(96, 96, 32, 32);
    case 29: // Cthulhu (Cthu)
	return java.awt.Rectangle(0, 384, 32, 48);
    case 30: // Gunsmith (Hermt Gunsm)
	return java.awt.Rectangle(0, 64, 32, 32);
    case 31: // Bat(hang_black) (Enemy BatBH)
	return java.awt.Rectangle(0, 158, 32, 32);
    case 32: // Life Capsule (Capsl life)
	return java.awt.Rectangle(64, 192, 32, 32);
    case 33: // Shot(Bllg_bounce) (Proj Blrg2)
	return java.awt.Rectangle(480, 160, 32, 32);
    case 34: // Bed (Bed)
	return java.awt.Rectangle(384, 96, 64, 32);
    case 35: // Mannan (Enemy Manan)
	return java.awt.Rectangle(192, 128, 48, 64);
    case 36: // Balrog(hover) (Boss Blrg2)
	return java.awt.Rectangle(0, 0, 80, 48);
    case 37: // Signpost (Sign post)
	return java.awt.Rectangle(384, 128, 32, 32);
    case 38: // Fire (Fire place)
	return java.awt.Rectangle(256, 128, 32, 32);
    case 39: // SaveSign (Save sign)
	return java.awt.Rectangle(448, 126, 32, 34);
    case 40: // Santa (Santa)
	return java.awt.Rectangle(0, 64, 32, 32);
    case 41: // BustedDoor (Door bustd)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 42: // Sue (Sue)
	return java.awt.Rectangle(0, 0, 32, 32);
    case 43: // Chalkboard (Black board)
	return java.awt.Rectangle(256, 160, 80, 64);
    case 44: // Polish (Enemy Polsh)
	return java.awt.Rectangle(0, 0, 64, 64);
    case 45: // Baby (Enemy Baby)
	return java.awt.Rectangle(32, 64, 32, 32);
    case 46: // H/V_trigger (H/V trigr)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 47: // SandCroc (Enemy SandCroc)
	return java.awt.Rectangle(306, 94, 70, 66);
    case 48: // ProjOmega (Proj Omega)
	return java.awt.Rectangle(574, 174, 32, 32);
    case 49: // SkullHead (Enemy SkulH)
	return java.awt.Rectangle(64, 160, 64, 44);
    case 50: // ProjSkeleton (Proj Skele)
	return java.awt.Rectangle(96, 64, 32, 32);
    case 51: // Crow&SkullHead (Enemy CrowS)
	return java.awt.Rectangle(128, 160, 124, 44);
    case 52: // BlueRobot(sit) (BRobt sit)
	return java.awt.Rectangle(512, 400, 32, 32);
    case 53: // Unknown(crash) (CRASH)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 54: // SkullStep (Enemy SkulS)
	return java.awt.Rectangle(64, 160, 64, 44);
    case 55: // Cairn (Kazum)
	return java.awt.Rectangle(384, 384, 32, 48);
    case 56: // BeetleHorizBrown (Enemy BtlHB)
	return java.awt.Rectangle(0, 284, 32, 32);
    case 57: // Crow (Enemy Crow)
	return java.awt.Rectangle(192, 160, 64, 64);
    case 58: // Basu(1) (Enemy Basu1)
	return java.awt.Rectangle(384, 0, 48, 48);
    case 59: // EyeDoor (Enemy Door)
	return java.awt.Rectangle(416, 160, 32, 48);
    case 60: // Toroko (Torok)
	return java.awt.Rectangle(0, 128, 32, 32);
    case 61: // King (King)
	return java.awt.Rectangle(448, 64, 32, 32);
    case 62: // Kazuma(pc) (Kazum compu)
	return java.awt.Rectangle(544, 384, 32, 48);
    case 63: // Toroko(stick) (Torok attck)
	return java.awt.Rectangle(128, 128, 32, 32);
    case 64: // Critter(b) (Enemy CrtHB)
	return java.awt.Rectangle(0, 0, 32, 32);
    case 65: // Bat(blue) (Enemy BatBu)
	return java.awt.Rectangle(64, 64, 32, 32);
    case 66: // MiseryBubble (Bubbl)
	return java.awt.Rectangle(64, 432, 46, 48);
    case 67: // Misery(float) (Msry float)
	return java.awt.Rectangle(160, 0, 32, 32);
    case 68: // Balrog(run) (Boss Blrg1)
	return java.awt.Rectangle(0, 0, 80, 48);
    case 69: // Pignon (Enemy Pign)
	return java.awt.Rectangle(96, 0, 32, 32);
    case 70: // Sparkle (Spark item)
	return java.awt.Rectangle(192, 96, 32, 32);
    case 71: // Chinfish (Enemy Chinf)
	return java.awt.Rectangle(128, 64, 32, 32);
    case 72: // Sprinkler (Sprnk)
	return java.awt.Rectangle(448, 96, 32, 32);
    case 73: // Water drop (Water drop)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 74: // Jack (Jack)
	return java.awt.Rectangle(128, 0, 32, 32);
    case 75: // Kanpachi(fishn) (Kanpa fishn)
	return java.awt.Rectangle(554, 64, 48, 48);
    case 76: // Flowers (Flowr)
	return java.awt.Rectangle(64, 0, 32, 32);
    case 77: // Yamashita (Sanda pavil)
	return java.awt.Rectangle(0, 32, 96, 64);
    case 78: // Pot (Pot)
	return java.awt.Rectangle(320, 96, 32, 32);
    case 79: // Mahin (Mahin)
	return java.awt.Rectangle(0, 0, 32, 32);
    case 80: // Gravekeeper (Enemy GravK)
	return java.awt.Rectangle(0, 128, 48, 48);
    case 81: // Giant_Pignon (Enemy GPign)
	return java.awt.Rectangle(288, 128, 48, 48);
    case 82: // Misery(stand) (Msry stand)
	return java.awt.Rectangle(224, 0, 32, 32);
    case 83: // Igor(cutscene) (Igor)
	return java.awt.Rectangle(0, 0, 80, 80);
    case 84: // Shot(basu1) (Proj Basu1)
	return java.awt.Rectangle(128, 96, 32, 32);
    case 85: // Terminal (Termn)
	return java.awt.Rectangle(544, 192, 30, 48);
    case 86: // Missle (Missl)
	return java.awt.Rectangle(0, 160, 32, 32);
    case 87: // Heart (Heart)
	return java.awt.Rectangle(64, 160, 32, 32);
    case 88: // Igor (Boss Igor)
	return java.awt.Rectangle(0, 0, 80, 80);
    case 89: // Igor(dead) (Dead Igor)
	return java.awt.Rectangle(574, 176, 42, 32);
    case 90: // Unknown(90) (Backg)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 91: // Cage (Cage)
	return java.awt.Rectangle(192, 176, 64, 48);
    case 92: // Sue(pc) (Sue compu)
	return java.awt.Rectangle(544, 432, 32, 48);
    case 93: // Chaco (Chaco)
	return java.awt.Rectangle(256, 0, 32, 32);
    case 94: // Kulala (Enemy Kulal)
	return java.awt.Rectangle(544, 0, 96, 48);
    case 95: // Jelly (Enemy Jelly)
	return java.awt.Rectangle(384, 130, 32, 32);
    case 96: // Fan(l) (Fan left)
	return java.awt.Rectangle(576, 240, 32, 32);
    case 97: // Fan(u) (Fan up)
	return java.awt.Rectangle(576, 272, 32, 32);
    case 98: // Fan(r) (Fan right)
	return java.awt.Rectangle(576, 304, 32, 32);
    case 99: // Fan(d) (Fan down)
	return java.awt.Rectangle(576, 336, 32, 32);
    case 100: // Grate (Grate)
	return java.awt.Rectangle(544, 96, 32, 32);
    case 101: // ControlScreen (PowCn scrn)
	return java.awt.Rectangle(480, 272, 32, 32);
    case 102: // PowerWave (PowCn pflow)
	return java.awt.Rectangle(416, 240, 32, 32);
    case 103: // Shot(manann) (Proj Manan)
	return java.awt.Rectangle(386, 198, 32, 32);
    case 104: // Frog (Enemy Frog)
	return java.awt.Rectangle(0, 224, 64, 64);
    case 105: // Balloon(hey_low) (Bloon HeyL)
	return java.awt.Rectangle(256, 64, 32, 32);
    case 106: // Balloon(hey_high) (Bloon HeyH)
	return java.awt.Rectangle(256, 64, 32, 32);
    case 107: // Malco (Malco)
	return java.awt.Rectangle(416, 0, 32, 48);
    case 108: // Shot(Balfrog) (Proj Bfrog)
	return java.awt.Rectangle(192, 96, 28, 30);
    case 109: // Malco(broke) (Malco damgd)
	return java.awt.Rectangle(480, 0, 32, 48);
    case 110: // Puchi (Enemy Puchi)
	return java.awt.Rectangle(192, 256, 32, 32);
    case 111: // Quote(teleOut) (Quote t-out)
	return java.awt.Rectangle(0, 0, 32, 32);
    case 112: // Quote(teleIn) (Quote t-in)
	return java.awt.Rectangle(0, 0, 32, 32);
    case 113: // Booster (Boost)
	return java.awt.Rectangle(448, 0, 32, 32);
    case 114: // Press (Enemy Press)
	return java.awt.Rectangle(352, 224, 32, 48);
    case 115: // Ravil (Enemy Ravil)
	return java.awt.Rectangle(0, 240, 48, 48);
    case 116: // RedPetals (RFlow petal)
	return java.awt.Rectangle(544, 368, 96, 32);
    case 117: // Curly (Curly)
	return java.awt.Rectangle(0, 192, 32, 32);
    case 118: // Curly(boss) (Boss Curly)
	return java.awt.Rectangle(0, 64, 64, 48);
    case 119: // Table&Chair (Table chair)
	return java.awt.Rectangle(496, 368, 48, 32);
    case 120: // Colon_1 (Colon 1)
	return java.awt.Rectangle(0, 0, 32, 32);
    case 121: // Colon_2 (Colon 2)
	return java.awt.Rectangle(128, 32, 32, 32);
    case 122: // Colon_attack (Enemy Colon)
	return java.awt.Rectangle(160, 0, 32, 32);
    case 123: // Shot(Curly) (Proj Curly)
	return java.awt.Rectangle(384, 0, 32, 32);
    case 124: // Sunstone (Sun stone)
	return java.awt.Rectangle(384, 0, 62, 64);
    case 125: // HiddenItem (Hiddn H/M)
	return java.awt.Rectangle(288, 400, 32, 32);
    case 126: // Puppy (Puppy run)
	return java.awt.Rectangle(48, 144, 16, 16);
    case 127: // MG_trail_2 (Glows Momnt)
	return java.awt.Rectangle(128, 172, 96, 8);
    case 128: // MG_trail_3 (Glows Momnt)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 129: // Snake_Fball_trail (Glows Momnt)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 130: // Puppy_wag (Puppy wag)
	return java.awt.Rectangle(96, 288, 32, 32);
    case 131: // Puppy_sleep (Puppy sleep)
	return java.awt.Rectangle(288, 288, 32, 32);
    case 132: // Puppy_bark (Puppy bark)
	return java.awt.Rectangle(256, 288, 32, 32);
    case 133: // Jenka (Jenka)
	return java.awt.Rectangle(352, 64, 32, 32);
    case 134: // Armadillo (Enemy Armdl)
	return java.awt.Rectangle(448, 0, 64, 32);
    case 135: // Skeleton (Enemy Skelt)
	return java.awt.Rectangle(576, 64, 64, 64);
    case 136: // Puppy_hat (Carry Puppy)
	return java.awt.Rectangle(96, 288, 32, 32);
    case 137: // LargeDoor_frame (LDoor frame)
	return java.awt.Rectangle(192, 272, 64, 64);
    case 138: // LargeDoor_door (LDoor doors)
	return java.awt.Rectangle(192, 224, 64, 48);
    case 139: // Doctor(crown) (Doctr)
	return java.awt.Rectangle(0, 256, 48, 64);
    case 140: // Toroko(frenzy) (Boss Torok)
	return java.awt.Rectangle(0, 0, 64, 64);
    case 141: // TorokoBlock (CRASH)
	return java.awt.Rectangle(576, 64, 32, 32);
    case 142: // FlowerCub (Enemy Flwcb)
	return java.awt.Rectangle(0, 256, 32, 32);
    case 143: // Jenka(collapse) (Jenka uncon)
	return java.awt.Rectangle(416, 64, 94, 32);
    case 144: // Toroko(teleIn) (Torok telep)
	return java.awt.Rectangle(64, 128, 32, 32);
    case 145: // Unknown(145) (CRASH)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 146: // Lightning (Ligtn)
	return java.awt.Rectangle(608, 416, 32, 64);
    case 147: // Critter(hover) (Enemy CrtHv)
	return java.awt.Rectangle(0, 192, 32, 32);
    case 148: // Shot(crit_p) (Proj CrtHv)
	return java.awt.Rectangle(192, 192, 16, 16);
    case 149: // MovBlock_h (Block MoveH)
	return java.awt.Rectangle(32, 0, 64, 64);
    case 150: // Quote (Quote)
	return java.awt.Rectangle(0, 0, 32, 32);
    case 151: // BlueRobot(stand) (BRobt stand)
	return java.awt.Rectangle(384, 0, 32, 32);
    case 152: // Shutter(stuck) (Shutr stuck)
	return java.awt.Rectangle(192, 128, 32, 64);
    case 153: // Gaudi (Enemy Gaudi)
	return java.awt.Rectangle(0, 0, 48, 48);
    case 154: // Gaudi(dead) (Dead Gaudi)
	return java.awt.Rectangle(384, 0, 48, 48);
    case 155: // Gaudi(flying) (Enemy GaudF)
	return java.awt.Rectangle(0, 96, 48, 48);
    case 156: // Shot(Gaudi) (Proj GaudF)
	return java.awt.Rectangle(192, 224, 32, 32);
    case 157: // MovBlock_v (Block MoveV)
	return java.awt.Rectangle(32, 0, 64, 64);
    case 158: // FishMissle(x) (Proj MonX)
	return java.awt.Rectangle(0, 448, 32, 32);
    case 159: // X(dead) (Dead MonX)
	return java.awt.Rectangle(288, 262, 96, 136);
    case 160: // Pooh_black (Boss PoohB)
	return java.awt.Rectangle(0, 0, 80, 48);
    case 161: // Shot(p_black) (Proj PoohB)
	return java.awt.Rectangle(0, 96, 32, 32);
    case 162: // p_black(dead) (Dead PoohB)
	return java.awt.Rectangle(80, 0, 80, 48);
    case 163: // Dr.Gero (Dr Gero)
	return java.awt.Rectangle(384, 0, 32, 32);
    case 164: // Nurse_Hasumi (Nurse Hasum)
	return java.awt.Rectangle(448, 0, 32, 32);
    case 165: // Curly(collapse) (Curly uncon)
	return java.awt.Rectangle(448, 192, 32, 32);
    case 166: // Chaba (Chaba Gaudi)
	return java.awt.Rectangle(292, 212, 70, 43);
    case 167: // Booster(fall) (Boost fall)
	return java.awt.Rectangle(608, 0, 32, 32);
    case 168: // Boulder (Bould)
	return java.awt.Rectangle(527, 115, 113, 77);
    case 169: // Balrog(Missle) (Boss Blrg3)
	return java.awt.Rectangle(0, 0, 80, 48);
    case 170: // Shot(bllg_msl) (Proj Blrg3)
	return java.awt.Rectangle(224, 192, 32, 16);
    case 171: // Fire_Whirr (Enemy FWhir)
	return java.awt.Rectangle(244, 96, 64, 64);
    case 172: // Shot(Whirr) (Proj FWhir)
	return java.awt.Rectangle(496, 96, 32, 64);
    case 173: // Gaudi(Armor) (Enemy GaudA)
	return java.awt.Rectangle(0, 256, 48, 48);
    case 174: // Shot(gaud_arm) (Proj GaudA)
	return java.awt.Rectangle(240, 160, 32, 32);
    case 175: // Gaudi_Egg (Enemy GaudE)
	return java.awt.Rectangle(336, 160, 48, 48);
    case 176: // BuyoBuyo (Enemy BuyoB)
	return java.awt.Rectangle(192, 256, 64, 32);
    case 177: // Buyo_baby (Enemy Buyo)
	return java.awt.Rectangle(384, 288, 32, 32);
    case 178: // Shot(core_spin) (Proj Core1)
	return java.awt.Rectangle(0, 448, 32, 32);
    case 179: // Shot(core_wisp) (Proj Core2)
	return java.awt.Rectangle(96, 448, 48, 32);
    case 180: // Curly_AI (Curly A.I.)
	return java.awt.Rectangle(0, 192, 32, 32);
    case 181: // Unknown(181) (?)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 182: // Unknown(182) (?)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 183: // MiseryBubble (?)
	return java.awt.Rectangle(64, 432, 46, 48);
    case 184: // Shutter(big) (Shutr large)
	return java.awt.Rectangle(0, 128, 64, 64);
    case 185: // Shutter(small) (Shutr small)
	return java.awt.Rectangle(192, 128, 32, 64);
    case 186: // LiftBlock (Lift block)
	return java.awt.Rectangle(96, 96, 32, 32);
    case 187: // FuzzCore (Enemy FuzzC)
	return java.awt.Rectangle(448, 208, 64, 64);
    case 188: // Fuzz(baby) (Fuzz Baby)
	return java.awt.Rectangle(576, 208, 32, 32);
    case 189: // HomingFlame (Proj HomFl)
	return java.awt.Rectangle(96, 448, 32, 32);
    case 190: // BrokeRobo (Surfc robot)
	return java.awt.Rectangle(384, 64, 32, 32);
    case 191: // WaterLevel (Water level)
	return java.awt.Rectangle(0, 416, 32, 32);
    case 192: // Scooter (Scoot)
	return java.awt.Rectangle(450, 128, 58, 32);
    case 193: // Scooter(broke) (Scoot dead)
	return java.awt.Rectangle(510, 190, 128, 34);
    case 194: // BrokenRobo (BRobt dead)
	return java.awt.Rectangle(384, 224, 66, 31);
    case 195: // GrateMouth (Grate mouth)
	return java.awt.Rectangle(224, 128, 31, 32);
    case 196: // MotionWall (Mtion wall)
	return java.awt.Rectangle(256, 64, 32, 32);
    case 197: // PorcupineFish (Enemy PFish)
	return java.awt.Rectangle(0, 0, 32, 32);
    case 198: // Shot(ironH) (Proj IronH)
	return java.awt.Rectangle(480, 92, -70, 50);
    case 199: // Current (Water curnt)
	return java.awt.Rectangle(448, 100, 32, 28);
    case 200: // Enemy - Dragon Zombie (Enemy DragZ)
	return java.awt.Rectangle(0, 0, 80, 80);
    case 201: // Dragon Zombie (dead) (Dead DragZ)
	return java.awt.Rectangle(400, 40, 84, 32);
    case 202: // Projectile - Dragon Zombie (Proj DragZ)
	return java.awt.Rectangle(364, 432, 36, 46);
    case 203: // Enemy - Critter (hopping, aqua) (Enemy CrtHA)
	return java.awt.Rectangle(0, 160, 32, 32);
    case 204: // Falling Spike (small) (Spike FallS)
	return java.awt.Rectangle(480, 288, 32, 32);
    case 205: // Falling Spike (large) (Spike FallL)
	return java.awt.Rectangle(256, 160, 32, 64);
    case 206: // Enemy - Counter Bomb (Enemy CBomb)
	return java.awt.Rectangle(160, 160, 80, 88);
    case 207: // Balloon (countdown) (Bloon CDown)
	return java.awt.Rectangle(0, 288, 32, 26);
    case 208: // Enemy - Basu (2) (Enemy Basu2)
	return java.awt.Rectangle(496, 160, 48, 44);
    case 209: // Projectile - Basu (2) (Proj Basu2)
	return java.awt.Rectangle(400, 224, 32, 32);
    case 210: // Enemy - Beetle (follow 2) (Enemy BtlF2)
	return java.awt.Rectangle(0, 224, 32, 32);
    case 211: // Spikes (Spike)
	return java.awt.Rectangle(512, 400, 32, 32);
    case 212: // Sky Dragon (Sky Dragn)
	return java.awt.Rectangle(320, 320, 74, 64);
    case 213: // Enemy - Night Spirit (Enemy NiteS)
	return java.awt.Rectangle(0, 0, 96, 96);
    case 214: // Projectile - Night Spirit (Proj NiteS)
	return java.awt.Rectangle(288, 96, 64, 32);
    case 215: // Enemy - Sandcroc (white) (Enemy ScrcW)
	return java.awt.Rectangle(0, 240, 96, 16);
    case 216: // Debug cat (Debug cat)
	return java.awt.Rectangle(512, 400, 32, 32);
    case 217: // Itoh (Itoh)
	return java.awt.Rectangle(288, 128, -128, 192);
    case 218: // Projectile? (Proj?)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 219: // Generator - Smoke/Underwater current (Genrt Smoke)
	return java.awt.Rectangle(32, 0, 32, 32);
    case 220: // Shovel Brigade (SBrig stand)
	return java.awt.Rectangle(0, 128, 32, 32);
    case 221: // Shovel Brigade (walking) (SBrig walk)
	return java.awt.Rectangle(0, 128, 32, 32);
    case 222: // Prison bars (Prisn bars)
	return java.awt.Rectangle(192, 336, 32, 64);
    case 223: // Momorin (Momo)
	return java.awt.Rectangle(160, 388, 32, 44);
    case 224: // Chie (Chie)
	return java.awt.Rectangle(224, 64, 32, 32);
    case 225: // Megane (Megan)
	return java.awt.Rectangle(128, 128, 32, 32);
    case 226: // Kanpachi (Kanpa stand)
	return java.awt.Rectangle(544, 64, 48, 48);
    case 227: // Bucket (Buckt)
	return java.awt.Rectangle(416, 64, 32, 32);
    case 228: // Droll (guard) (Droll guard)
	return java.awt.Rectangle(0, 0, 64, 84);
    case 229: // Red Flowers (sprouts) (RFlow sprts)
	return java.awt.Rectangle(0, 200, 32, 24);
    case 230: // Red Flowers (blooming) (RFlow bloom)
	return java.awt.Rectangle(200, 200, 56, 56);
    case 231: // Rocket (Rockt)
	return java.awt.Rectangle(352, 64, 64, 32);
    case 232: // Enemy - Orangebell (Enemy Orang)
	return java.awt.Rectangle(256, 0, 64, 64);
    case 233: // <CRASH> (CRASH)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 234: // Red Flowers (picked) (RFlow pickd)
	return java.awt.Rectangle(288, 200, 56, 24);
    case 235: // Enemy - Midorin (Midor)
	return java.awt.Rectangle(384, 200, 32, 24);
    case 236: // Enemy - Gunfish (Enemy Gunfs)
	return java.awt.Rectangle(256, 120, 52, 56);
    case 237: // Projectile - Gunfish (Proj Gunfs)
	return java.awt.Rectangle(624, 64, 14, 16);
    case 238: // Enemy - Press (killer) (Enemy PresK)
	return java.awt.Rectangle(368, 400, 48, 32);
    case 239: // Cage bars (Cage bars)
	return java.awt.Rectangle(192, 222, 96, 66);
    case 240: // Mimiga (jailed) (Mimig jail)
	return java.awt.Rectangle(0, 128, 32, 32);
    case 241: // Enemy - Critter (hopping, red) (Enemy CritHR)
	return java.awt.Rectangle(0, 0, 32, 32);
    case 242: // Enemy - Bat (red) (Enemy BatRd)
	return java.awt.Rectangle(0, 64, 32, 32);
    case 243: // Generator - Bat (red) (Genrt BatRd)
	return java.awt.Rectangle(0, 64, 32, 32);
    case 244: // Acid drop (Acid drop)
	return java.awt.Rectangle(192, 0, 12, 32);
    case 245: // Generator - Acid drop (Genrt Acid)
	return java.awt.Rectangle(192, 0, 12, 32);
    case 246: // Enemy - Press (proximity) (Enemy PresP)
	return java.awt.Rectangle(288, 224, 32, 48);
    case 247: // Boss - Misery (Boss Msry)
	return java.awt.Rectangle(0, 0, 32, 32);
    case 248: // Boss - Misery (vanish) (Boss MsryV)
	return java.awt.Rectangle(0, 0, 32, 32);
    case 249: // Projectile - Misery (energy shot) (Proj Msry1)
	return java.awt.Rectangle(64, 64, 32, 32);
    case 250: // Projectile - Misery (lightning ball) (Proj Msry2)
	return java.awt.Rectangle(0, 64, 32, 32);
    case 251: // Projectile - Misery (lightning) (Proj Msry3)
	return java.awt.Rectangle(160, 64, 32, 64);
    case 252: // Projectile - Misery (Bat) (Misery bat)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 253: // Energy Capsule (Capsl enrgy)
	return java.awt.Rectangle(0, 128, 32, 32);
    case 254: // Helicopter (Heli copter)
	return java.awt.Rectangle(0, 0, 256, 128);
    case 255: // <CRASH> (CRASH)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 256: // Doctor (crowned, facing away) (Doctr back)
	return java.awt.Rectangle(96, 320, 48, 64);
    case 257: // Red Crystal (Red Cryst)
	return java.awt.Rectangle(352, 64, 14, 32);
    case 258: // Mimiga (sleeping) (Mimig sleep)
	return java.awt.Rectangle(96, 64, 32, 32);
    case 259: // Curly (carried, unconscious) (Carry Curl1)
	return java.awt.Rectangle(320, 192, 32, 32);
    case 260: // Shovel Brigade (caged) (SBrig cage)
	return java.awt.Rectangle(0, 128, 32, 32);
    case 261: // Chie (caged) (Chie cage)
	return java.awt.Rectangle(224, 64, 32, 32);
    case 262: // Chaco (caged) (Chaco cage)
	return java.awt.Rectangle(256, 0, 32, 32);
    case 263: // Boss - Doctor (Boss Doct1)
	return java.awt.Rectangle(364, 320, 52, 64);
    case 264: // Projectile - Doctor (red wave) (Proj Doct1)
	return java.awt.Rectangle(572, 0, 32, 32);
    case 265: // Projectile - Doctor (red ball - fast vanish) (Proj RFBal)
	return java.awt.Rectangle(572, 0, 32, 32);
    case 266: // Projectile - Doctor (red ball - slow vanish) (Proj RSBal)
	return java.awt.Rectangle(572, 0, 32, 32);
    case 267: // Boss - Muscle Doctor (Boss Doct2)
	return java.awt.Rectangle(0, 128, 80, 96);
    case 268: // Enemy - Igor (Enemy Igor)
	return java.awt.Rectangle(0, 0, 80, 80);
    case 269: // Enemy - Bat (red energy) (Enemy BatRE)
	return java.awt.Rectangle(464, 0, 32, 32);
    case 270: // Red energy (Red enrgy)
	return java.awt.Rectangle(336, 64, 12, 16);
    case 271: // Underwater block (UBlok)
	return java.awt.Rectangle(256, 32, 32, 32);
    case 272: // Generator - Underwater block (Genrt UBlok)
	return java.awt.Rectangle(256, 32, 32, 32);
    case 273: // Projectile - Droll (Proj Droll)
	return java.awt.Rectangle(496, 80, 48, 48);
    case 274: // Enemy - Droll (Enemy Droll)
	return java.awt.Rectangle(0, 0, 64, 84);
    case 275: // Puppy (with items) (Puppy items)
	return java.awt.Rectangle(96, 288, 32, 32);
    case 276: // Boss - Red Demon (Boss RDemn)
	return java.awt.Rectangle(0, 128, 64, 76);
    case 277: // Projectile - Red Demon (Proj RDemn)
	return java.awt.Rectangle(256, 0, 44, 48);
    case 278: // Little family (Littl famly)
	return java.awt.Rectangle(0, 240, 12, 16);
    case 279: // Falling block (large) (FBlck large)
	return java.awt.Rectangle(0, 32, 64, 64);
    case 280: // Sue (teleported in by Misery) (Sue telep)
	return java.awt.Rectangle(224, 64, 30, 32);
    case 281: // Doctor (red energy form) (Doctr enrgy)
	return java.awt.Rectangle(366, 320, 50, 64);
    case 282: // Mini Undead Core - floats forward (Mini UCore)
	return java.awt.Rectangle(512, 240, 128, 80);
    case 283: // Enemy - Misery (transformed) (Enemy Msry)
	return java.awt.Rectangle(0, 128, 64, 64);
    case 284: // Enemy - Sue (transformed) (Enemy Sue)
	return java.awt.Rectangle(0, 256, 64, 64);
    case 285: // Projectile - Undead Core (orange spiral shot) (Proj OSpir)
	return java.awt.Rectangle(0, 448, 32, 32);
    case 286: // Orange Dot (Orang Dot)
	return java.awt.Rectangle(464, 210, 30, 28);
    case 287: // Orange Smoke (Orang Smoke)
	return java.awt.Rectangle(96, 448, 32, -10);
    case 288: // Projectile - Undead Core (glowing rock thing) (Proj GRock)
	return java.awt.Rectangle(464, 142, 32, 34);
    case 289: // Enemy - Critter (hopping, orange) (Enemy CrtHO)
	return java.awt.Rectangle(320, 64, 32, 32);
    case 290: // Enemy - Bat (orange) (Enemy BatOr)
	return java.awt.Rectangle(224, 64, 32, 32);
    case 291: // Mini Undead Core (before fight) (UCore Mini)
	return java.awt.Rectangle(512, 0, 128, 80);
    case 292: // Quake (Quake)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 293: // Projectile - Undead Core (huge energy shot) (Proj HEner)
	return java.awt.Rectangle(560, 400, 80, 80);
    case 294: // Quake & Generator - Falling blocks (Quake FBlck)
	return java.awt.Rectangle(0, 32, 64, 64);
    case 295: // Cloud (Cloud)
	return java.awt.Rectangle(288, 224, 96, 60);
    case 296: // Generator - Cloud (Genrt Cloud)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 297: // <CRASH> (Sometimes) (CRASH SOME)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 298: // Doctor (uncrowned) (Intro Doctr)
	return java.awt.Rectangle(200, 320, 40, 64);
    case 299: // Balrog/Misery (bubble) (Intro Bubbl)
	return java.awt.Rectangle(0, 0, 96, 96);
    case 300: // Demon Crown (Intro Crown)
	return java.awt.Rectangle(384, 160, 32, 32);
    case 301: // Enemy - Fish Missile (orange) (Enemy FishO)
	return java.awt.Rectangle(286, 0, 32, 32);
    case 302: // Something with ending Scenes (End Scene)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 303: // <nothing?> (?)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 304: // Gaudi (sitting) (Gaudi sit)
	return java.awt.Rectangle(0, 352, 48, 32);
    case 305: // Puppy (small) (Puppy small)
	return java.awt.Rectangle(320, 300, 32, 20);
    case 306: // Balrog (nurse) (Blrg nurse)
	return java.awt.Rectangle(480, 200, 80, 56);
    case 307: // Santa (caged) (Santa cage)
	return java.awt.Rectangle(0, 64, 32, 32);
    case 308: // Enemy - Stumpy (Enemy Stump)
	return java.awt.Rectangle(252, 228, 32, 32);
    case 309: // Enemy - Bute (Enemy Bute)
	return java.awt.Rectangle(0, 0, 32, 32);
    case 310: // Enemy - Bute (sword) (Enemy ButeS)
	return java.awt.Rectangle(64, 0, 44, 32);
    case 311: // Enemy - Bute (archer) (Enemy ButeA)
	return java.awt.Rectangle(0, 64, 48, 48);
    case 312: // Projectile - Bute (archer) (Proj ButeA)
	return java.awt.Rectangle(0, 320, 32, 32);
    case 313: // Boss - Ma Pignon (Boss MPign)
	return java.awt.Rectangle(256, 0, 32, 32);
    case 314: // Falling, Indestructible (???)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 315: // Enemy (hopping, disappears) (Enemy ???)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 316: // Enemy - Bute (defeated) (Dead Bute)
	return java.awt.Rectangle(542, 82, 44, 28);
    case 317: // Enemy - Mesa (Enemy Mesa)
	return java.awt.Rectangle(0, 160, 64, 76);
    case 318: // Enemy - Mesa (defeated) (Dead Mesa)
	return java.awt.Rectangle(448, 160, 64, 80);
    case 319: // <CRASH> (CRASH)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 320: // Curly (carried, shooting) (Carry Curl2)
	return java.awt.Rectangle(0, 192, 32, 32);
    case 321: // <nothing?> (?)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 322: // Enemy - Deleet (Enemy Delet)
	return java.awt.Rectangle(320, 432, 44, 46);
    case 323: // Enemy - Bute (generator) (Enemy ButeG)
	return java.awt.Rectangle(432, 64, 32, 44);
    case 324: // Generator - Bute (Genrt Bute)
	return java.awt.Rectangle(432, 64, 32, 44);
    case 325: // Projectile - Heavy Press (Proj HeavP)
	return java.awt.Rectangle(476, 0, 34, 192);
    case 326: // Itoh/Sue (turning human) (turn human)
	return java.awt.Rectangle(194, 256, 126, 52);
    case 327: // <CRASH> (CRASH)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 328: // Transmogrifier (human machn)
	return java.awt.Rectangle(192, 0, 64, 96);
    case 329: // Building fan (Bldg fan)
	return java.awt.Rectangle(96, 0, 32, 32);
    case 330: // Enemy - Rolling (Enemy Rolln)
	return java.awt.Rectangle(288, 272, 32, 32);
    case 331: // Projectile - Ballos (bone) (Proj Blls1)
	return java.awt.Rectangle(576, 160, 32, 32);
    case 332: // Projectile - Ballos (shockwave) (Proj Blls2)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 333: // Projectile - Ballos (lightning) (Proj Blls3)
	return java.awt.Rectangle(520, 0, 22, 480);
    case 334: // Sweat (Sweat)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 335: // Ika-chan (Ika- chan)
	return java.awt.Rectangle(0, 32, 32, 32);
    case 336: // Generator - Ika-chan? (Genrt Ika)
	return java.awt.Rectangle(0, 32, 32, 32);
    case 337: // Numahachi (Numa hachi)
	return java.awt.Rectangle(512, 224, 64, 76);
    case 338: // Enemy - Green Devil (Enemy GDevl)
	return java.awt.Rectangle(566, 0, 38, 32);
    case 339: // Generator - Green Devil (Genrt GDevl)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 340: // Boss - Ballos (Boss Blls1)
	return java.awt.Rectangle(0, 0, 88, 80);
    case 341: // <CRASH> (CRASH)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 342: // <CRASH> (CRASH)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 343: // <CRASH> (CRASH)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 344: // <CRASH> (CRASH)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 345: // Projectile - Ballos (skull) (Proj Blls4)
	return java.awt.Rectangle(256, 352, 32, 32);
    case 346: // <CRASH> (CRASH)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 347: // Enemy - Hoppy (Enemy Hoppy)
	return java.awt.Rectangle(512, 96, 32, 32);
    case 348: // Ballos spikes (rising) (Spike Blls)
	return java.awt.Rectangle(252, 302, 36, 50);
    case 349: // Statue (Statu)
	return java.awt.Rectangle(64, 200, 64, 88);
    case 350: // Enemy - Bute (archer, red) (Enemy ButRA)
	return java.awt.Rectangle(98, 324, 42, 40);
    case 351: // Statue (can shoot) (Statu shoot)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 352: // King (sword) (King sword)
	return java.awt.Rectangle(448, 64, 28, 32);
    case 353: // Enemy - Bute (sword, red) (Enemy ButRS)
	return java.awt.Rectangle(396, 316, 36, 36);
    case 354: // Invisible deathtrap wall (Invis Trap)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 355: // <CRASH> (Sometimes) (CRASH SOME)
	return java.awt.Rectangle(0, 0, 0, 0);
    case 356: // Balrog (rescue) (Blrg rescu)
	return java.awt.Rectangle(0, 0, 80, 48);
    case 357: // Puppy (ghost) (Puppy ghost)
	return java.awt.Rectangle(448, 274, 32, 32);
    case 358: // Misery (wind) (Msry wind)
	return java.awt.Rectangle(416, 20, 28, 44);
    case 359: // Generator - Water drop (Genrt WDrop)
	return java.awt.Rectangle(144, 32, 4, 4);
    case 360: // 'Thank you!' (Thank you!)
	return java.awt.Rectangle(0, 352, 96, 14);
    default:
	return java.awt.Rectangle(0, 0, 0, 0);
    }
}
function getEntityOffset(entity) {
    return new java.awt.Point(0, 0);
}
